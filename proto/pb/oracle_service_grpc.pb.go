// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: oracle_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OracleService_GetInfo_FullMethodName              = "/blindbit.oracle.v1.OracleService/GetInfo"
	OracleService_GetBestBlockHeight_FullMethodName   = "/blindbit.oracle.v1.OracleService/GetBestBlockHeight"
	OracleService_GetBlockHashByHeight_FullMethodName = "/blindbit.oracle.v1.OracleService/GetBlockHashByHeight"
	OracleService_StreamComputeIndex_FullMethodName   = "/blindbit.oracle.v1.OracleService/StreamComputeIndex"
	OracleService_GetFullBlock_FullMethodName         = "/blindbit.oracle.v1.OracleService/GetFullBlock"
)

// OracleServiceClient is the client API for OracleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OracleServiceClient interface {
	// GetInfo returns oracle information
	GetInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InfoResponse, error)
	// GetBestBlockHeight returns the current best block height
	GetBestBlockHeight(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BlockHeightResponse, error)
	// GetBlockHashByHeight returns the block hash for a given height
	GetBlockHashByHeight(ctx context.Context, in *BlockHeightRequest, opts ...grpc.CallOption) (*BlockHashResponse, error)
	// Stream the compute index for a given range
	StreamComputeIndex(ctx context.Context, in *RangedBlockHeightRequestFiltered, opts ...grpc.CallOption) (OracleService_StreamComputeIndexClient, error)
	// Get a full block with full information for the block
	GetFullBlock(ctx context.Context, in *BlockHeightRequest, opts ...grpc.CallOption) (*FullBlockResponse, error)
}

type oracleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOracleServiceClient(cc grpc.ClientConnInterface) OracleServiceClient {
	return &oracleServiceClient{cc}
}

func (c *oracleServiceClient) GetInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, OracleService_GetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleServiceClient) GetBestBlockHeight(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BlockHeightResponse, error) {
	out := new(BlockHeightResponse)
	err := c.cc.Invoke(ctx, OracleService_GetBestBlockHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleServiceClient) GetBlockHashByHeight(ctx context.Context, in *BlockHeightRequest, opts ...grpc.CallOption) (*BlockHashResponse, error) {
	out := new(BlockHashResponse)
	err := c.cc.Invoke(ctx, OracleService_GetBlockHashByHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleServiceClient) StreamComputeIndex(ctx context.Context, in *RangedBlockHeightRequestFiltered, opts ...grpc.CallOption) (OracleService_StreamComputeIndexClient, error) {
	stream, err := c.cc.NewStream(ctx, &OracleService_ServiceDesc.Streams[0], OracleService_StreamComputeIndex_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &oracleServiceStreamComputeIndexClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OracleService_StreamComputeIndexClient interface {
	Recv() (*ComputeIndexResponse, error)
	grpc.ClientStream
}

type oracleServiceStreamComputeIndexClient struct {
	grpc.ClientStream
}

func (x *oracleServiceStreamComputeIndexClient) Recv() (*ComputeIndexResponse, error) {
	m := new(ComputeIndexResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oracleServiceClient) GetFullBlock(ctx context.Context, in *BlockHeightRequest, opts ...grpc.CallOption) (*FullBlockResponse, error) {
	out := new(FullBlockResponse)
	err := c.cc.Invoke(ctx, OracleService_GetFullBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OracleServiceServer is the server API for OracleService service.
// All implementations must embed UnimplementedOracleServiceServer
// for forward compatibility
type OracleServiceServer interface {
	// GetInfo returns oracle information
	GetInfo(context.Context, *emptypb.Empty) (*InfoResponse, error)
	// GetBestBlockHeight returns the current best block height
	GetBestBlockHeight(context.Context, *emptypb.Empty) (*BlockHeightResponse, error)
	// GetBlockHashByHeight returns the block hash for a given height
	GetBlockHashByHeight(context.Context, *BlockHeightRequest) (*BlockHashResponse, error)
	// Stream the compute index for a given range
	StreamComputeIndex(*RangedBlockHeightRequestFiltered, OracleService_StreamComputeIndexServer) error
	// Get a full block with full information for the block
	GetFullBlock(context.Context, *BlockHeightRequest) (*FullBlockResponse, error)
	mustEmbedUnimplementedOracleServiceServer()
}

// UnimplementedOracleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOracleServiceServer struct {
}

func (UnimplementedOracleServiceServer) GetInfo(context.Context, *emptypb.Empty) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedOracleServiceServer) GetBestBlockHeight(context.Context, *emptypb.Empty) (*BlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBestBlockHeight not implemented")
}
func (UnimplementedOracleServiceServer) GetBlockHashByHeight(context.Context, *BlockHeightRequest) (*BlockHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHashByHeight not implemented")
}
func (UnimplementedOracleServiceServer) StreamComputeIndex(*RangedBlockHeightRequestFiltered, OracleService_StreamComputeIndexServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamComputeIndex not implemented")
}
func (UnimplementedOracleServiceServer) GetFullBlock(context.Context, *BlockHeightRequest) (*FullBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullBlock not implemented")
}
func (UnimplementedOracleServiceServer) mustEmbedUnimplementedOracleServiceServer() {}

// UnsafeOracleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OracleServiceServer will
// result in compilation errors.
type UnsafeOracleServiceServer interface {
	mustEmbedUnimplementedOracleServiceServer()
}

func RegisterOracleServiceServer(s grpc.ServiceRegistrar, srv OracleServiceServer) {
	s.RegisterService(&OracleService_ServiceDesc, srv)
}

func _OracleService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleService_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleServiceServer).GetInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleService_GetBestBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleServiceServer).GetBestBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleService_GetBestBlockHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleServiceServer).GetBestBlockHeight(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleService_GetBlockHashByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleServiceServer).GetBlockHashByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleService_GetBlockHashByHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleServiceServer).GetBlockHashByHeight(ctx, req.(*BlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleService_StreamComputeIndex_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RangedBlockHeightRequestFiltered)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OracleServiceServer).StreamComputeIndex(m, &oracleServiceStreamComputeIndexServer{stream})
}

type OracleService_StreamComputeIndexServer interface {
	Send(*ComputeIndexResponse) error
	grpc.ServerStream
}

type oracleServiceStreamComputeIndexServer struct {
	grpc.ServerStream
}

func (x *oracleServiceStreamComputeIndexServer) Send(m *ComputeIndexResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OracleService_GetFullBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleServiceServer).GetFullBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleService_GetFullBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleServiceServer).GetFullBlock(ctx, req.(*BlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OracleService_ServiceDesc is the grpc.ServiceDesc for OracleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OracleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blindbit.oracle.v1.OracleService",
	HandlerType: (*OracleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _OracleService_GetInfo_Handler,
		},
		{
			MethodName: "GetBestBlockHeight",
			Handler:    _OracleService_GetBestBlockHeight_Handler,
		},
		{
			MethodName: "GetBlockHashByHeight",
			Handler:    _OracleService_GetBlockHashByHeight_Handler,
		},
		{
			MethodName: "GetFullBlock",
			Handler:    _OracleService_GetFullBlock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamComputeIndex",
			Handler:       _OracleService_StreamComputeIndex_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "oracle_service.proto",
}
